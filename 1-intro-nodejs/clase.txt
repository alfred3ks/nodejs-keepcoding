Vamos a ver la primera clase de NodeJS.
Tutor: Javier Miguel, @javiermiguelg

Veremos nodejs + express + mongodb. Tenemos una carpeta doc, donde esta el PDF de la presentación.

Que es NodeJS:

- Es un interprete de JavaScript. Motor V8 del navegador de JS sacado para ser ejecutado en el servidor.
- Inicialmente diseñado para correr en servidores.
- Asincrono, trabajo muy comodo.
- Orientado a eventos. El usuario o los programas cliente son quienes definen el flujo.
- No necesitamos Tomcat, IIS, etc.
- Tampoco necesitamos un servidor web Apache, nginx, etc.
- Nuestra aplicación realiza todas las funciones de un servidor.

NodeJS utiliza para interpretar JS el Motor V8:
- Motor JavaScript creado por Google para Chrome.
- Escrito en C++.
- Multiplataforma(win,Mac,Linux).

Versiones que podemos encontrar de NodeJS:
- Vamos a la web:
https://nodejs.org/es/

Para nodejs tenemos que ver los tipos de versiones que tenemos, vemos que al entrar en la página nos propone, una LTS y una Actual. la LTS son versiones recomendadas para la mayoría, ya que son las versiones que tiene mayor soporte. Las versiones Actual, es la última versión. Tambien debemos saber que las versiones inpares son versiones inestables.

Si vamos a trabajar para una app seria lo mejor es hacerlo con uns LTS. Tenemos que tomar en cuenta el tiempo de desarrollo de la aplicación y luego el tiempo de despliegue de la aplicación. Para pruebas podemos usar la Actual.

Podemos ver la agenda para las versiones LTS:

https://github.com/nodejs/release#release-schedule

NodeJS se ejecuta el código en un solo hilo, pero podemos crear hilos en funcion de las necesidades, pero cada hilo se autolimita a 1gb. Aunque si necesitamos aumentar es limite de memoria lo podriamos hacer, pero no es muy común.

Ventajas de NodeJS:
- Aplicaciones de red, como APIs, servicios en tiempo real, servidores de comunicaciones, etc.
- Aplicaciones cuyos clientes estan hechos en JavaScript, pues comparten codigo y estructura entre el cliente y el servidor.

Hablemos ahora un poco de donde viene el desarrollo de JS y de NodeJS:
Desde la versión 4.0 de Node.js, una de las principales mejoras es que incluyen la libreria V8 en la version v4.5, incluyendo de forma estable muchas caracteristicas de ES2015(ES6) que nos haran a vida mas facil.
- Block scoping,
- Classes,
- Typed arrays,
- Generators,
- Promises,
- Symbols,
- Template string,
- Collections(Map, Set, etc),
and arrow functions.

Todas estas mejoras ayudaron mucho al desarrollo diario de aplicaciones.

Para cuando vayamos a trabajar con NodeJS, tenemos una página para ver que podemos usar de nodejs para desarrollar nuestras aplicaciones, para eso tenemos esta web, muy parecida a la de frontend:
https://caniuse.com/

Para NodeJs tenemos:
https://node.green/

Ahora vamos a ver como instalar NodeJs, tenemos varias formas:

- Desde el instalador de la web, vamos a su web lo descargamos y lo instalamos,
- Con un instalador de paquetes,
- Compilandolo manualmente,
- Usando un gestor de versiones, -> nvm, existen otros gestores pero recomeiendan este que va muy bien.

La recomendada es usas nvm, node version manager. Tenemos como instalar nvm en su repo: Vemos como hacerlo para mac y linux:

https://github.com/nvm-sh/nvm

Para windows:

https://github.com/coreybutler/nvm-windows

Bajamos el instalador e instalamos.

Si usamos un manejador de versiones de nodejs podremos instalar varias versiones en nuestro pc, si lo hacemos con el instalador de la web solo podemos usar la version que instalemos.

Para ver que version de nvm e instalación de nodejs:
  nvm version -> vemos que version de nvm tenemos instalada.
  nvm list -> vemos las versiones instaladas.
  nvm install <version-nodejs> -> instalamos la version que queremos.
  nvm use <version-nodejs> -> usamos la version.


Para ver que version de nodejs:
  node -v
  npm -v
  npm -g list --depth=0

Vale ahora vamos a ver como funciona esto de nodejs en codigo vamos a ver como crear un servidor basico usando nodejs. Lo tenemos en la carpeta practica/servidor-basico/index.js.

Para arrancar el servidor:

node index.js y vemos como arranca. Ahora como vemos cada vez que hagamos cambios en el codigo debemos parar e iniciar de nuevo el servidor para que se vean los cambios para evitar esto vamos a instalar una utilizada que nos reiniciara el servidor cada vez que detecte cambio en el codigo, esa utilidad es nodemon.

  npm install -g nodemon

Lo vamos a instalar de manera global, en nuestro pc. NO en el proyecto.

Ya instalado debemos hacer para arrancarlo:

  nodemon
  ó
  nodemon index.js

nodemon busca varias cosas al ejecutarlo sin nada solo su nombre, por defecto el busca un fichero index.js en la carpeta, sino lo encuentra busca un fichero llamado package.json a ver si en ese fichero esta indicado cual es el fichero de arranque de la aplicacion, si no estan ambos pues fallara y no arrancara.

Ahora vamos a ver que es NPM:

NPM: node package manager, es un gestor de paquetes que nos ayuda a gestionar las dependencias de nuestro proyecto.
Entre otras cosas nos permite:
- Instalar librerias o programas de terceros.
- Eliminarlas.
- Mantenerlas actualizadas.

Este gestor de paquetes se instala junto con nodejs.

Ahora para probar vamos a instalar una libreria en la carpeta practica/servidor-basico

  npm install chance

Esta libreria se inventa nombres de manera aleatoria.
Como vemos esta libreria la estamos instalando en el proyecto. Vemos que al instalarse se han generado los siguiente:

carpeta:
node_modules

archivos:
package.json
package-lock.json

Ya hablaremos mas adelante de estos archivos y carpeta. Ahora una cosa que debemos saber que npm tiene un comando que se llama:

  npm repo <paquetes/libreria>
  npm repo chance

  https://github.com/chancejs/chancejs

Nos lleva a la pagina de ese paquete y libreria. Para ver su documentacion y como se utiliza.

Ahora vamos a ver como crear nosotros un package.json, ojo esto es lo primero que debemos hacer al crear un proyecto.

  npm init

Le damos ok a todas las opciones.
Tambien tenemos un comando para que lo hago todo por defecto:

  npm init -y

En el archivo package.json es donde se ven las caracteristicas de nuestro proyecto, y las dependencias del mismo. Tambien vemos que la carpeta node_modules que es donde se instalan lo que descargamos, tambien vemos que tenemos el archivo package-lock.json ahi estan las dependencias de las dependencias.

OJO en el .gitignore acordarse de gitignore la carpeta node_modules para que no vaya al repo.

-- JAVASCRIPT AVANZADO: OJO.
Ahora vamos a ver unos conceptos de JS que un desarrollador debe saber si se quiere considerar un desarrollador de JS.

-- Hoisting:
Es una operación que hace el interprete de JS con las variables de tipo var. OJO solo con var. El interprete se lleva la declaracion de la variable al inicio del contexto de esa variable, en JS el contexto es la funcion donde se ha creado, si es una funcion al inicio de esta, si es global al inicio del contexto global.
Esto significa que el interprete va a mover al principio de su contexto la declaracion de la varaible, manteniendo la iniciacion donde estaba.

Ejemplo: Asi desarrollamos el codigo:
var pinto = 'global value';
function pinta(){
  console.log('pinto', pinto);
  var pinto = 'Local value';
}

pinta();

Asi hace el interprete:
var pinto = 'global value';
function pinta(){
  var pinto;
  console.log('pinto', pinto); // undefined
  pinto = 'Local value';
}

pinta();

La variable local pisa la local y es la que se muestra por el console, y como se hace hoisting es undefined.

El hoisting no es un problema, es una caracteristica del lenguaje. Recomendacion, usar let y const. Ya que no hacen hoisting, ya que su scope es el bloque en que es definido.

OJO las funciones tambien hacen hoisting, pero solo cuando las uso como expresio. No como una declaracion.
Expresion-> function(){}
Declaracion-> var y = function(){}, asignacion a una variable.
Lo que vemos que se ira arriba es la y, no la funcion.
Las arrow function no hacen hoisting.

-- Control de errores:
Tenemos dos tipos de errores en JS:
- errores sincronos.
- errores asincronas.

Se gestionan de forma distinta, lo veremos mas adelante mas claro. Los errores sincronos los gestionaremos con try{} catch(){} y los errores asincronos los gestionaremos con callback.

-- JSON:
Son las siglas de JavaScript Object Notation.
- Es un formato para el intercambio de datos, derivado de la notacion literal de objetos de JavaScript.
- Se usa habitualmente para serializar objetos(convertirlo a texto) o estructuras de datos.
- Se ha popularizado mucho principalmente como alternativa a XML, por ser mas ligero que este.

Como converitmo un objeto a JSON: Por medio del objeto global JSON con su metodo JSON.stringify(objeto):
let empleado = {
  nombre: 'Thomas Anderson',
  profesion: 'Developer JS'
}

let empleadoJSON = JSON.stringify(empleado);
console.log(empleadoJSON);
{"nombre": "Thomas Anderson", "profesion": ""Developer JS};

Vemos que los nombres de las propiedades se llevan es comillas dobles, solo permite comillas dobles.

Ahora a la inversa para pasar un JSON a Objeto: Usaemos el objeto global JSON con su metodo JSON.parse(json);

let empleadoObjet = JSON.parse(empleadoJSON);
console.log(empleadoObjet);
{nombre: 'Thomas Anderson', profesion: 'Developer JS'}

-- Use strict: JS en modo estricto:
'use strict';

JS cuando se creo lo creo Brendan Eich, estando en nestscape, un viernes se fue a su casa y un lunes tenia la primera version de JS, una alfa. Se llamaba mocha.

JS posee el modo escrito que soluciona varios fallos originarios del lenguaje:
El modo estricto habilita avisos y hace de JavaScript un lenguaje un poco mas coherente. El modo no estricto se suele llamar sloppy mode, par ahabilitar se puede escribir al principio de un fichero.

  'use strict';

O tambien se puede habilitar dentro de una función:

  function estoyEnStrictMode(){
    'use strict';
  }

Pero que nos aporta el mode strict:
- Las varaibles deben ser declaradas. En sloppy mode, una varaible mal escrita se crearia en global, en stric fallaria.
- En funciones que no son metodos this sera undefined.
- eval() es mas limpio. Las varaibles que se definen en el codigo evaluado no pasan al scope que lo rodea.

Ahora cada vez que creemos un programa usaremos el use strict.

-- Las funciones:
Las funciones son objetos. Por lo tanto tambien propiedades y métodos.

Todo en JS menos los primitivos son objetos.
Los primitivos de JS:
¿Cuántos tipos de JavaScript hay?
Los 9 tipos de datos en JavaScript
  Undefined.
  Boolean.
  Number.
  String.
  BigInt.
  Symbol.
  Null.
  Object.

Funciones - declaración:
function suma(num1, num2){
  return num1 + num2;
}
suma(2,4);

- Requieren un nombre,
- Solo a nivel de programa o directamente e el cuerpo de otra funcion.
- Hacen hoisting.

Funciones - expresion:
let suma = function(num1, num2){
  return num1 + num2;
}
suma(4,5);

- Como son expresiones, se pueden definir en cualquier sitio donde pueda ir un valor. Por ejemplo, podemos pasarlas como parametros.
- No hacen hoisting, se pueden usar solo despues de su definicion.
- Pueden tener un nombre, pero solo seria visible dentro del cuerpo.

Podemos crear funciones como propiedades de un objeto:

let calculadora = {
  suma: function(a,b){return a + b};
  resta: function(a,b){return a - b};
}

calculadora.suma(4,5);
calculadora.resta(4,5);

Cuando una funcion es una propiedad de un objeto se les llama metodo.

Podemos crear objetos por medio de funciones:
function Fruta(){
  let nombre, familia;
  this.getNombre = function(){return nombre};
  this.setNombre = function(value){nombre = value};
}

let limon = new Fruta();
limon.setNombre('Citrus limon');

Cuando se usa new al invocar una funcion se comporta como un constructor de objetos.

Vemos un ejemplo: 1-intro-nodejs/practica/instancias.js

-- Callbacks:
Es como dar mas instrucciones, osea pasamos esa instruccion adicional.
Una función callback es aquella que es pasada como argumento a otra función para que sea "llamada de nuevo" (call back) en un momento posterior. Una función que acepta otras funciones como argumentos es llamada función de orden-superior (High-Order), y contiene la lógica para determinar cuándo se ejecuta la función callback. Es la combinación de estas dos la que nos permite ampliar nuestra funcionalidad.

Un ejemplo es cuando usamos setTimeout(), que recibe como parametros:
- Una funcion con el codigo que queremos que se ejecute tras la espera,
- El numero de milisegundos que tiene que estar en pasusa hasta llamarla.

console.log('Empiezo');

setTimeout(()=>{
  console.log('Me ejecuto dentro');
}, 2000);

console.log('Fin')

La función que pasamos a setTimeout() es un callback.

Los callbacks nos aportan muchos beneficios, ya que NO bloqueo mi programa, y solo cuando pasan los 2s se lanza la funcion.

Los callbacks se usan sobre todo en recursos de comunicaciones, hablar con el disco duro, por ejemplo. La idea es hacer operaciones en paralelo con la ejecucion del resto del codigo ya que esas operaciones son mas lentas.
Hacemos una operacion asincrona. Los callbacks nos aportan asincronismo.

En nodejs, todos los usos de entrada/salida(I/O) deberian ser asincronos.
Si tras una llamada a una funcion asincrona queremos hacer algo, como comprobar su resultado o su hubo errores, le pasamos un argumento mas, una expresion modo funcion -> callback, para que la invoque cuando termine.

function suma(n1,n2, callbacks){
  let resultado = n1 + n2;
  callback(resultado);
}

suma(1,4, (res)=>{
  console.log(res);
})

La funcion la pasamos como tercer parametro entra arriba y se ejecuta dentro. Esto es un ejemplo simbolico porque esto no necsita como tal un callback pero es para que veamos como se pasa una funcion como callback.

Vemos los callback en el siguiente ejemplo:
Haremos una función que recibe un texto y tras 2 segundos lo escriba en la consola.

1-intro-nodejs/practica/asincrono_paralelo.js

